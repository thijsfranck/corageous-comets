{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Courageous Comets \u2604\ufe0f","text":"<p>Navigating a new Discord server can be overwhelming, but it doesn't have to be. Introducing Courageous Comets, the Discord bot that helps you feel at home in any server!</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p> Discover new communities</p> <p>Quickly evaluate whether a new server is the right fit for you.</p> <p> Get to know a community</p> </li> <li> <p> Find your niche</p> <p>Easily locate the channels and users that match your interests and values.</p> <p> Find your way around</p> <p> Discover like-minded people</p> </li> <li> <p> Foster positivity</p> <p>Identify the most welcoming and positive communities on Discord and help them grow.</p> <p> Build safe environments</p> </li> <li> <p> Free and open-source</p> <p>Courageous Comets is fully open source and free to use for anyone!</p> <p> Install on your server</p> <p> Deploy your own instance</p> </li> </ul>"},{"location":"#contents","title":"Contents","text":"<p>This documentation is divided into the following sections:</p> <ul> <li>User Guide: How to interact with the bot and make the most of its features.</li> <li>Administrator Guide: How to deploy, configure and manage the bot in production.</li> <li>Contributor Guide: How to set up a development environment and contribute to   the project.</li> </ul>"},{"location":"#authors","title":"Authors","text":"<p>Thank you for your interest in our project! It was built as part of the Python Discord Summer Code Jam 2024.</p> <p>The following team members contributed to the project:</p> <p> </p>"},{"location":"#license","title":"License","text":"<p>This project is published under the MIT license.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v100-2024-07-28","title":"v1.0.0 (2024-07-28)","text":""},{"location":"CHANGELOG/#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>dependencies are no longer updated</li> </ul>"},{"location":"CHANGELOG/#feat","title":"Feat","text":"<ul> <li>lock dependencies for final version</li> </ul>"},{"location":"CHANGELOG/#v0100-2024-07-28","title":"v0.10.0 (2024-07-28)","text":""},{"location":"CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>frequency time divisions (#62)</li> <li>add topics command that lists the most used keywords (#61)</li> <li>add user keyword frequency (#60)</li> </ul>"},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>capitalize embed title</li> <li>ensure consistent styling on embed titles</li> <li>improve logging for all interactions</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>log message processed as debug event</li> <li>log database event as error</li> <li>simplify messages cog</li> <li>remove redundant error class</li> <li>remove redundant decorator</li> <li>split up keywords and sentiment cogs, improve cog documentation</li> </ul>"},{"location":"CHANGELOG/#v090-2024-07-28","title":"v0.9.0 (2024-07-28)","text":""},{"location":"CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>add praise interaction for user and message sentiment</li> <li>harmonize sentiment embeds</li> <li>add details to frequency embed</li> <li>refactor cogs with ui components and complete existing interactions</li> </ul>"},{"location":"CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>increase search results max preview length</li> <li>show channel in search results</li> <li>avoid error when no sentiment data is available for a user</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>remove redundant code</li> <li>remove unused component</li> <li>move message processing to a separate module</li> </ul>"},{"location":"CHANGELOG/#v080-2024-07-27","title":"v0.8.0 (2024-07-27)","text":""},{"location":"CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>plot message frequency graph</li> </ul>"},{"location":"CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>reference current version in documentation</li> <li>update app description and set embed footer</li> <li>handle missing sentiment data</li> <li>restore user sentiment interaction</li> <li>add exists check</li> <li>silence KeyboardInterrupt on application shutdown (#59)</li> <li>remove  cog from erroneous merge conflict resolution (#58)</li> <li>remove unused context menu loader</li> </ul>"},{"location":"CHANGELOG/#v070-2024-07-26","title":"v0.7.0 (2024-07-26)","text":""},{"location":"CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>add user sentiment interaction (#54)</li> <li>set up frequency cog (#53)</li> <li>add sentiment chart (#52)</li> <li>add cog that returns information about the app (#50)</li> <li>add drop_code_blocks processor</li> <li>get message rate by duration (#49)</li> <li>calculate count of tokens across messages (#48)</li> <li>allow redis search filtering across multiple ids (#47)</li> <li>add development mode (#46)</li> </ul>"},{"location":"CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>remove reference to link from general bot description and add it to the about message</li> <li>handle PackageNotFoundError</li> <li>add version and log version on startup</li> </ul>"},{"location":"CHANGELOG/#v060-2024-07-24","title":"v0.6.0 (2024-07-24)","text":""},{"location":"CHANGELOG/#feat_5","title":"Feat","text":"<ul> <li>store message tokens (#45)</li> <li>limit queries to most recent messsages (#43)</li> <li>store sentiment results along with message (#42)</li> </ul>"},{"location":"CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>simplify function signatures and make it easier to build scope filters (#44)</li> </ul>"},{"location":"CHANGELOG/#v050-2024-07-23","title":"v0.5.0 (2024-07-23)","text":""},{"location":"CHANGELOG/#feat_6","title":"Feat","text":"<ul> <li>add docker compose and fix production dockerfile</li> </ul>"},{"location":"CHANGELOG/#v040-2024-07-23","title":"v0.4.0 (2024-07-23)","text":""},{"location":"CHANGELOG/#feat_7","title":"Feat","text":"<ul> <li>revert back to hash data type for storing messages (#41)</li> </ul>"},{"location":"CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>open app config in read mode</li> <li>trucate uses correct length</li> <li>preprocessing drops extra whitespace</li> </ul>"},{"location":"CHANGELOG/#v030-2024-07-22","title":"v0.3.0 (2024-07-22)","text":""},{"location":"CHANGELOG/#feat_8","title":"Feat","text":"<ul> <li>store sentiment analysis with message data (#39)</li> <li>set up message content preprocessing (#40)</li> <li>replace sentence_transformers with transformers library (#36)</li> <li>add messages cog (#32)</li> <li>return messages based on similarity score (#30)</li> </ul>"},{"location":"CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>fix sync command signature and internal logic (#38)</li> <li>save messages with message_id on redis (#33)</li> <li>ensure consistent log output (#29)</li> <li>suppress warnings from libraries</li> </ul>"},{"location":"CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>remove hfvectorizer (#35)</li> <li>include save_message in Messages cog (#34)</li> <li>remove throws clause from docstring</li> </ul>"},{"location":"CHANGELOG/#v020-2024-07-21","title":"v0.2.0 (2024-07-21)","text":""},{"location":"CHANGELOG/#feat_9","title":"Feat","text":"<ul> <li>setup transformer models (#28)</li> <li>use pydantic to model Redis hashes (#25)</li> <li>add sentiment analysis (#24)</li> <li>add api to store word frequency on redis (#23)</li> <li>download nltk resources on startup (#22)</li> </ul>"},{"location":"CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>handle contractions in tokenizer (#26)</li> <li>control max number of concurrent downloads</li> <li>add logging and remove return section from docstring</li> </ul>"},{"location":"CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>move startup logic into bot class (#27)</li> <li>improve docs, types and fix some linter issues</li> <li>update docstrings</li> <li>improve type hints</li> </ul>"},{"location":"CHANGELOG/#v010-2024-07-20","title":"v0.1.0 (2024-07-20)","text":""},{"location":"CHANGELOG/#feat_10","title":"Feat","text":"<ul> <li>add bot boilerplate</li> </ul>"},{"location":"CHANGELOG/#fix_7","title":"Fix","text":"<ul> <li>improved error handling and settings validation</li> <li>include application config in docker image (#15)</li> <li>set redis host from environment variables</li> </ul>"},{"location":"CHANGELOG/#refactor_5","title":"Refactor","text":"<ul> <li>improve error handling and logging</li> </ul>"},{"location":"CHANGELOG/#v006-2024-07-19","title":"v0.0.6 (2024-07-19)","text":""},{"location":"CHANGELOG/#v005-2024-07-17","title":"v0.0.5 (2024-07-17)","text":""},{"location":"CHANGELOG/#v004-2024-07-16","title":"v0.0.4 (2024-07-16)","text":""},{"location":"CHANGELOG/#v003-2024-07-16","title":"v0.0.3 (2024-07-16)","text":""},{"location":"CHANGELOG/#v002-2024-07-16","title":"v0.0.2 (2024-07-16)","text":""},{"location":"CHANGELOG/#v001-2024-07-15","title":"v0.0.1 (2024-07-15)","text":""},{"location":"admin-guide/","title":"Administrator Guide","text":"<p>This guide is intended for administrators and developers. It provides instructions on how to deploy and configure the application, as well as how to manage it in production.</p>"},{"location":"admin-guide/#contents","title":"Contents","text":"<ul> <li>Deployment: How to deploy the bot in a production environment.</li> <li>Configuration: How to configure your bot deployment.</li> <li>Changelog: The bot's changelog.</li> </ul>"},{"location":"admin-guide/configuration/","title":"Configuration","text":"<p>The following environment variables are available to configure the application:</p> Variable Description Required Default <code>DISCORD_TOKEN</code> The Discord bot token. Yes - <code>BOT_CONFIG_PATH</code> The path to the bot's configuration file. No <code>application.yaml</code> <code>DISCORD_API_CONCURRENCY</code> The maximum number of concurrent Discord API requests. No <code>3</code> <code>ENVIRONMENT</code> The environment in which the application is running. No <code>production</code> <code>HF_DOWNLOAD_CONCURRENCY</code> The maximum number of concurrent downloads when installing transformers. No <code>3</code> <code>HF_HOME</code> The directory containing Huggingface Transformers data files. No <code>hf_data</code> <code>LOG_LEVEL</code> The minimum log level. No <code>INFO</code> <code>MPLCONFIGDIR</code> The directory containing Matplotlib configuration files. No <code>/app/matplotlib</code> <code>NLTK_DATA</code> The directory containing NLTK data files. No <code>nltk_data</code> <code>NLTK_DOWNLOAD_CONCURRENCY</code> The maximum number of concurrent downloads when installing NLTK data. No <code>3</code> <code>PREPROCESSING_MAX_WORD_LENGTH</code> The maximum word length. Longer words are dropped. No <code>35</code> <code>PREPROCESSING_MESSAGE_TRUNCATE_LENGTH</code> The maximum message length. Longer messages are truncated. No <code>256</code> <code>REDIS_HOST</code> The Redis host. No <code>localhost</code> <code>REDIS_PORT</code> The Redis port. No <code>6379</code> <code>REDIS_PASSWORD</code> The Redis password. No -"},{"location":"admin-guide/configuration/#required-settings","title":"Required Settings","text":"<p>The following settings are required to start the application:</p>"},{"location":"admin-guide/configuration/#discord_token","title":"<code>DISCORD_TOKEN</code>","text":"<p>You can obtain a Discord bot token from the Discord Developer Portal. Your token should have the following scopes:</p> <ul> <li><code>bot</code></li> </ul> <p>Security Warning</p> <p>Do not share your token with anyone!</p>"},{"location":"admin-guide/configuration/#optional-settings","title":"Optional Settings","text":"<p>The following settings are optional or have default values that can be overridden:</p>"},{"location":"admin-guide/configuration/#bot_config_path","title":"<code>BOT_CONFIG_PATH</code>","text":"<p>This specifies the location of the bot's configuration file. By default, the application searches for a file named <code>application.yaml</code> in the directory from which it is launched. In the Docker image, this file is located at <code>/app/application.yaml</code>.</p> <p>Read more about the <code>application.yaml</code> file.</p>"},{"location":"admin-guide/configuration/#discord_api_concurrency","title":"<code>DISCORD_API_CONCURRENCY</code>","text":"<p>The maximum number of concurrent Discord API requests. By default, this is set to <code>3</code>.</p>"},{"location":"admin-guide/configuration/#environment","title":"<code>ENVIRONMENT</code>","text":"<p>The environment in which the application is running. Set this to <code>development</code> to enable development features such as loading development cogs. By default, this is set to <code>production</code>.</p>"},{"location":"admin-guide/configuration/#hf_download_concurrency","title":"<code>HF_DOWNLOAD_CONCURRENCY</code>","text":"<p>The maximum number of concurrent downloads when installing Huggingface Transformers models. By default, this is set to <code>3</code>.</p>"},{"location":"admin-guide/configuration/#hf_home","title":"<code>HF_HOME</code>","text":"<p>The directory containing Huggingface Transformers data files. By default, this is set to <code>hf_data</code> in the directory from which the application is launched. In the Docker image, this directory is located at <code>/app/hf_data</code>.</p>"},{"location":"admin-guide/configuration/#log_level","title":"<code>LOG_LEVEL</code>","text":"<p>The minimum log level to display. The following levels are available:</p> <ul> <li><code>DEBUG</code></li> <li><code>INFO</code></li> <li><code>WARNING</code></li> <li><code>ERROR</code></li> <li><code>CRITICAL</code></li> </ul> <p>The default log level is <code>INFO</code>.</p>"},{"location":"admin-guide/configuration/#mplconfigdir","title":"<code>MPLCONFIGDIR</code>","text":"<p>The directory containing <code>matplotlib</code> configuration files. Uses the default <code>matplotlib</code> configuration directory unless otherwise configured. In the Docker image, the <code>matplotlib</code> configuration files are located at <code>/app/matplotlib</code>.</p>"},{"location":"admin-guide/configuration/#nltk_data","title":"<code>NLTK_DATA</code>","text":"<p>The directory containing NLTK data files. By default, this is set to <code>nltk_data</code> in the directory from which the application is launched. In the Docker image, this directory is located at <code>/app/nltk_data</code>.</p>"},{"location":"admin-guide/configuration/#nltk_download_concurrency","title":"<code>NLTK_DOWNLOAD_CONCURRENCY</code>","text":"<p>The application automatically downloads NLTK data files on startup. This setting controls the number of concurrent downloads. By default, this is set to <code>3</code>.</p>"},{"location":"admin-guide/configuration/#preprocessing_max_word_length","title":"<code>PREPROCESSING_MAX_WORD_LENGTH</code>","text":"<p>The maximum word length. Words longer than this value are dropped. By default, this is set to <code>35</code>.</p>"},{"location":"admin-guide/configuration/#preprocessing_message_truncate_length","title":"<code>PREPROCESSING_MESSAGE_TRUNCATE_LENGTH</code>","text":"<p>The maximum message length. Messages longer than this value are truncated. By default, this is set to <code>256</code>.</p>"},{"location":"admin-guide/configuration/#redis_host","title":"<code>REDIS_HOST</code>","text":"<p>The hostname of the Redis server. Defaults to <code>localhost</code>.</p>"},{"location":"admin-guide/configuration/#redis_port","title":"<code>REDIS_PORT</code>","text":"<p>The port of the Redis server. Defaults to <code>6379</code>.</p>"},{"location":"admin-guide/configuration/#redis_password","title":"<code>REDIS_PASSWORD</code>","text":"<p>The password of the Redis server. Set this variable if your Redis server requires authentication. No password is set by default.</p> <p>Security Warning</p> <p>Do not share your Redis password with anyone!</p>"},{"location":"admin-guide/configuration/#applicationyaml","title":"<code>application.yaml</code>","text":"<p>The <code>application.yaml</code> file is a configuration file that specifies the cogs to load, the NLTK datasets to download, and the Huggingface Transformers models to install on startup. It has the following structure:</p> <pre><code># List of cogs to load when the bot starts, identified by their package name.\ncogs:\n  - &lt;PACKAGE_NAME&gt;\n  - &lt;PACKAGE_NAME&gt;\n# List of cogs to load in development mode only, identified by their package name.\ndev-cogs:\n  - &lt;PACKAGE_NAME&gt;\n  - &lt;PACKAGE_NAME&gt;\n# List of NLTK datasets to download on startup.\nnltk:\n  - &lt;DATASET_NAME&gt;\n  - &lt;DATASET_NAME&gt;\n# List of Huggingface Transformers models to download on startup.\ntransformers:\n  - &lt;MODEL_NAME&gt;\n  - &lt;MODEL_NAME&gt;\n</code></pre> <p>Advanced Users Only</p> <p>For standard use, the <code>application.yaml</code> file does not need to be changed. We recommend against modifying this file unless you know what you're doing.</p> <p>One possible use case is to add additional feature or disable existing features by modifying the list of cogs. To add a new cog, add the package name to the <code>cogs</code> list. To disable a feature, remove the package name from the list.</p> <p>Below is a list of all cogs that are loaded by default:</p> Package Name Description <code>courageous_comets.cogs.about</code> Provides information about the bot. <code>courageous_comets.cogs.keywords.search_command</code> Searches for keywords using a slash command. <code>courageous_comets.cogs.keywords.search_context_menu</code> Searches for keywords using a context menu item. <code>courageous_comets.cogs.keywords.topics_command</code> Lists the most popular keywords for a given context using a slash command. <code>courageous_comets.cogs.keywords.user_context_menu</code> Lists the most popular keywords for a particular user using a context menu item. <code>courageous_comets.cogs.messages</code> Listens for messages and passes them on for internal processing. <code>courageous_comets.cogs.ping</code> Responds to ping requests. <code>courageous_comets.cogs.sentiment.message_context_menu</code> Analyzes the sentiment of a message using a context menu item. <code>courageous_comets.cogs.sentiment.search_command</code> Searches for messages with similar sentiment using a slash command. <code>courageous_comets.cogs.sentiment.search_context_menu</code> Searches for messages with similar sentiment using a context menu item. <code>courageous_comets.cogs.sentiment.user_context_menu</code> Analyzes the sentiment of a user's messages using a context menu item. <code>courageous_comets.cogs.frequency</code> Provides an overview of the amount of recent messages for a given timespan."},{"location":"admin-guide/deployment/","title":"Deployment","text":""},{"location":"admin-guide/deployment/#deployment","title":"Deployment","text":"<p>This section provides instructions on how to deploy the Courageous Comets application in a production environment. Follow the steps below to set up the application.</p> <p>The application is deployed using Docker Docker Compose. It consists of the following services:</p> <ul> <li>courageous-comets:   The Courageous Comets application.</li> <li>redis-stack: The Redis instance used to store data.</li> </ul> <p>By the end of this guide, all services will be running as Docker containers on your system.</p>"},{"location":"admin-guide/deployment/#checklist","title":"Checklist","text":"<ul> <li> Set up Docker and Docker Compose on your system.</li> <li> Get the Docker Compose file.</li> <li> Set up a <code>.env</code> file.</li> <li> Configure your <code>DISCORD_TOKEN</code> in the <code>.env</code> file.</li> <li> Select the image versions (optional).</li> <li> Configure additional options (optional).</li> <li> Start the application using Docker Compose.</li> </ul>"},{"location":"admin-guide/deployment/#get-the-docker-compose-file","title":"Get the Docker Compose File","text":"<p>The application can be deployed using Docker Compose. You can use the <code>docker-compose.yaml</code> file provided in the GitHub repository to start the application.</p> <p>Get the Docker Compose </p> <p>Download the file and save it in any directory on your system.</p>"},{"location":"admin-guide/deployment/#configuration","title":"Configuration","text":"<p>Before starting the application, you need to configure the application settings. Create a <code>.env</code> file in the same directory as the <code>docker-compose.yaml</code> file.</p> <p>The sections below will guide you through setting up a minimal configuration to start the application.</p> What other configuration options are available? <p>Refer to the configuration section for a complete list of the available options.</p>"},{"location":"admin-guide/deployment/#discord-token","title":"Discord Token","text":"<p>The application requires a valid Discord bot token to connect to Discord. Add the following line to the <code>.env</code> file:</p> <pre><code>DISCORD_TOKEN=&lt;YOUR_TOKEN&gt;\n</code></pre> <p>Replace <code>&lt;YOUR_TOKEN&gt;</code> with your Discord bot token.</p> <p>Security Warning</p> <p>Keep your Discord bot token secure and do not share it with anyone!</p> Where do I find my Discord bot token? <p>See the configuration section for instructions on how to obtain a Discord bot token.</p>"},{"location":"admin-guide/deployment/#image-versions","title":"Image Versions","text":"<p>By default, the application uses the latest version of each Docker image. To specify a particular version, you can add the following variables to the <code>.env</code> file:</p> <pre><code>COURAGEOUS_COMETS_VERSION=&lt;APP_VERSION&gt;\nREDIS_STACK_VERSION=latest\n</code></pre> <p>Replace <code>latest</code> with the tag corresponding to the version you want to use.</p> Where can I find previous versions of the image? <p>Previous versions of the Courageous Comets image are available on the GitHub Container Registry.</p>"},{"location":"admin-guide/deployment/#start-the-application","title":"Start the Application","text":"<p>Prerequisites</p> <p>Please ensure that Docker and Docker Compose are installed on your system, and that the Docker daemon is running.</p> <p>Once you have set up the configuration, you can start the application using Docker Compose. Open a terminal and navigate to the directory where you saved the <code>docker-compose.yaml</code> file. Run the following command:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Docker Compose will start the application in the background. You can check the logs to verify that the application has started successfully:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>You can now interact with the application in any Discord server where it has been installed.</p>"},{"location":"contributor-guide/","title":"Contributor Guide","text":"<p>The contributor guide is intended for developers working on this project. It provides instructions on how to set up a new development environment, along with guidelines on version control, documentation, and testing.</p>"},{"location":"contributor-guide/#contents","title":"Contents","text":"<ul> <li>Architecture &amp; Design: How the application is structured and key design decisions.</li> <li>Development Environment: How to set up your development environment.</li> <li>Secrets Management: How to manage secrets securely in the project.</li> <li>Version Control: How to manage changes using version control.</li> <li>Documentation: How to write good documentation.</li> <li>Testing: How to test the application.</li> </ul>"},{"location":"contributor-guide/architecture-design/","title":"Architecture &amp; Design","text":"<p>This page describes the architecture and design of the Courageous Comets application.</p>"},{"location":"contributor-guide/architecture-design/#components","title":"Components","text":"<p>Below is a high-level view of the application components. Click on the links in the diagram to jump to the corresponding details section.</p> <pre><code>graph LR\n    subgraph Discord\n        User[\"User\"]\n    end\n\n    subgraph Courageous Comets\n        subgraph Bot[&lt;a href='#bot'&gt;Bot&lt;/a&gt;]\n            subgraph Controllers[&lt;a href='#controllers'&gt;Controllers&lt;/a&gt;]\n                MessagesCog[\"Messages\"]\n                Interactions[\"Interactions\"]\n            end\n            subgraph ApplicationLogic[&lt;a href='#application-logic'&gt;Application Logic&lt;/a&gt;]\n                Preprocessing{{\"Preprocessing\"}}\n                subgraph Processing\n                    WordCount[\"Word Count\"]\n                    Sentiment[\"Sentiment Analysis\"]\n                    Vectorization[\"Vectorization\"]\n                end\n            end\n        end\n        subgraph Storage[&lt;a href='#database'&gt;Database&lt;/a&gt;]\n            Redis[(\"Redis\")]\n        end\n    end\n\n    User --&gt;|\"Messages\"| MessagesCog\n    MessagesCog --&gt;|\"Text\"| Preprocessing\n    Preprocessing ---&gt;|\"Text\"| WordCount\n    Preprocessing ---&gt;|\"Text\"| Sentiment\n    Preprocessing ---&gt;|\"Text\"| Vectorization\n    WordCount --&gt;|\"Token Count\"| Redis\n    Sentiment --&gt;|\"Sentiment Scores\"| Redis\n    Vectorization --&gt;|\"Vector Embedding\"| Redis\n    User &lt;--&gt;|\"Interactions\"| Interactions\n    Interactions --&gt;|\"Queries\"| Redis</code></pre>"},{"location":"contributor-guide/architecture-design/#bot","title":"Bot","text":"<p>The bot is the main component of the Courageous Comets application. It is responsible for processing messages and performing analysis on them.</p> <p>The bot is built using the discord.py library. We chose this library since it's the most mature library for building Discord bots in Python and did not expect to need any special features provided by other libraries.</p> <p>The application is designed to be modular and extensible, with the core features implemented on separate layers.</p>"},{"location":"contributor-guide/architecture-design/#controllers","title":"Controllers","text":"<p>Controllers are responsible for handling user input and invoking the appropriate application logic. All controllers are implemented as Discord cogs, which are modular components that can be enabled or disabled based on the application configuration.</p>"},{"location":"contributor-guide/architecture-design/#messages","title":"Messages","text":"<p>The messages cog is highlighted in the diagram as it is the primary controller for processing messages. It listens for messages sent by users, and passes them on for internal processing.</p>"},{"location":"contributor-guide/architecture-design/#interactions","title":"Interactions","text":"<p>Other cogs included with the bot are responsible for handling interactions with users, such as slash commands, context menus, and buttons. Typically, the response to an interaction will be a UI element like an embed. Embeds may include charts, tables, or other visualizations.</p>"},{"location":"contributor-guide/architecture-design/#design-decisions","title":"Design Decisions","text":"<p>Responses from the bot should typically be sent as ephemeral messages, meaning they are only visible to the user who triggered the interaction. The exception to this is when an interaction is supposed to be visible to all users.</p> <p>When an interaction is triggered, the bot should respond as soon as possible to acknowledge the interaction. In case of loading times, the bot should provide a loading indicator to the user. In case of errors, useful feedback should be provided to the user in the form of an error message.</p> <p>We decided to have a dedicated cog per interaction. For example, there is a separate cog for searching for keywords using a slash command and a separate cog for searching for keywords using a context menu item. This split makes sure that each cog does not grow too large and remains maintainable.</p>"},{"location":"contributor-guide/architecture-design/#application-logic","title":"Application Logic","text":"<p>The application logic is responsible for processing messages and performing analysis on them. The logic is divided into several components:</p> <ul> <li>Preprocessing: Cleans and normalizes the input text.</li> <li>Word Count: Counts the number of words in the input text.</li> <li>Sentiment Analysis: Analyzes the sentiment of the input text.</li> <li>Vectorization: Generates a vector representation to support similarity search.</li> </ul>"},{"location":"contributor-guide/architecture-design/#database","title":"Database","text":"<p>The bot uses Redis as a database layer to store the results of the analysis. Redis is a fast and efficient key-value store that offers search and query features needed to enable the application logic.</p>"},{"location":"contributor-guide/architecture-design/#design-decisions_1","title":"Design decisions","text":"<p>We chose Redis over other databases like PostgreSQL or MongoDB because of its speed and simplicity.</p> <p>We knew that we'd be writing messages at a high rate and needed a database that could keep up with the volume of data. Redis only writes to memory and periodically persists to disk, making it ideal for our workload of writing a lot of small messages quickly.</p> <p>Further, we expected to need efficient full-text search capabilities and metric-based search capabilities. Redis provides these features out of the box, making it a good fit for our use case. Further, we expected not to require relational queries or complex joins, which are better suited for a relational database like PostgreSQL.</p> <p>Redis is also easy to set up and configure, making it a good choice for a small-scale application like Courageous Comets.</p> <p>There is a small risk of data loss in case of a crash. In case of an unexpected shutdown, the application may lose data that Redis has not yet persisted to disk. However, we are willing to accept this risk given that missing a few messages will not affect the overall user experience.</p>"},{"location":"contributor-guide/architecture-design/#data-model","title":"Data Model","text":"<p>The data model is designed to support a variety of analysis tasks and provide a flexible foundation for future extensions.</p>"},{"location":"contributor-guide/architecture-design/#message","title":"Message","text":"<p>The main entity of the data model is the <code>Message</code> object, which represents a message sent by a user. Messages are structured as follows:</p> Name Data Type Index Type Description <code>user_id</code> <code>string</code> <code>Tag</code> The discord ID of the user who sent the message. <code>message_id</code> <code>string</code> <code>Tag</code> The discord message ID. <code>channel_id</code> <code>string</code> <code>Tag</code> The ID of the discord channel where the message was sent. <code>guild_id</code> <code>string</code> <code>Tag</code> The ID of the guild where the message was sent. <code>timestamp</code> <code>float</code> <code>Numeric</code> The UNIX timestamp of when the message was sent. <code>sentiment_neg</code> <code>float</code> <code>Numeric</code> The negative score of the sentiment analysis of the message. <code>sentiment_pos</code> <code>float</code> <code>Numeric</code> The positive score of the sentiment analysis of the message. <code>sentiment_neu</code> <code>float</code> <code>Numeric</code> The neutral score of the sentiment analysis of the message. <code>sentiment_compound</code> <code>float</code> <code>Numeric</code> The compound score of the sentiment analysis of the message. <code>embedding</code> <code>bytes</code> <code>Vector</code> The embedding vector of the message content <code>tokens</code> <code>string</code> N/A JSON object mapping each token in the message to number of times it appeared in the message."},{"location":"contributor-guide/architecture-design/#design-decisions_2","title":"Design Decisions","text":"<p>While the fields ending with <code>_id</code> are integers on Discord, they are stored as strings on Redis and indexed as Tag fields as opposed to Numeric because we want to make exact-match queries on these fields and also because they are more memory-efficient and fast.</p> <p>Rather than store the message as a JSON document with the sentiment-related values stored in a nested mapping, they are stored on the same hash with a prefix of <code>sentiment_</code>. This is because JSON documents generally have a larger memory footprint compared to the Hash when searching over documents. Also, JSON documents take up more space than the Hash. For context, the JSON document representation of the message takes at least 14Kb while the hash takes at most 4Kb.</p> <p>The Cosine Similarity was chosen over the Euclidean distance and Internal product as the distance metric for searching the vector embedding because we want to consider the angle formed by two vectors (messages) and not their magnitude.</p> <p>The dimensions of the vector were chosen to match the dimension of the embedding generated by the all-MiniLM-L6-v2 transformer. Ensure to set the correct dimension as the transformer model being used during index creation on Redis.</p> <p>The <code>tokens</code> field on the hash was not indexed as there was no need to search over it. Including it in the index would increase the size of the index structure and add unnecessary overhead. However, we can still return it from search-based queries.</p>"},{"location":"contributor-guide/architecture-design/#packages-modules","title":"Packages &amp; Modules","text":"<p>This section describes the packages included with the project and the underlying module structure.</p>"},{"location":"contributor-guide/architecture-design/#courageous_comets","title":"<code>courageous_comets</code>","text":"<p>The application is fully contained within the <code>courageous_comets</code> package. The package is structured as follows:</p> Module Description <code>cogs</code> Provides the bot controllers (cogs) that handle user input. <code>discord</code> Implements functions for interacting with the Discord API. <code>nltk</code> Contains helpers for using the Natural Language Toolkit (NLTK) library. <code>redis</code> Provides the data access layer for interacting with Redis. <code>transformers</code> Contains helpers for working with Huggingface Transformers. <code>ui</code> Includes all UI elements for the bot (<code>charts</code>, <code>components</code>, <code>embeds</code>, and <code>views</code>). <code>client.py</code> Contains the main application client class. <code>__init__.py</code> Entrypoint for the package. Exports the application client instance. <code>__main__.py</code> Entrypoint for the application. Responsible for setup, teardown and root error handling. <code>enums.py</code> Shared enumerations used across the application. <code>exceptions.py</code> Includes the base exception class and custom exceptions used in the application. <code>models.py</code> Defines the entities used by the application using <code>pydantic</code> models. <code>preprocessing.py</code> Contains the preprocessing logic for cleaning and normalizing text. <code>processing.py</code> Implements the main processing logic for analyzing messages. <code>sentiment.py</code> Implements the sentiment analysis logic using the NLTK library. <code>settings.py</code> Provides input validation, default values and type hints for the app settings. <code>utils.py</code> Contains utility functions used across the application. <code>vectorizer.py</code> Implements the vectorization logic using the Huggingface Transformers library. <code>words.py</code> Contains the word count logic for counting the number of words in a text."},{"location":"contributor-guide/architecture-design/#tests","title":"<code>tests</code>","text":"<p>The <code>tests</code> package organizes the test suite for the application. The package is structured as follows:</p> Module Description <code>conftest.py</code> Contains shared fixtures and ensures NLTK and Huggingface data is loaded in CI. <code>courageous_comets</code> Includes tests that validate the behavior of each application module. <code>integrations</code> Provides tests that validate how the app interacts with Discord and the database."},{"location":"contributor-guide/architecture-design/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD (Continuous Integration and Continuous Deployment) pipeline automates the build, test, and deployment processes of the application. This achieves the following goals:</p> <ol> <li>The process ensures that code changes are consistently tested, maintaining high code quality and reliability</li> <li>It also enables full traceability and reproducibility of any    artifact released to production.</li> </ol> <p>This section provides a comprehensive overview of each stage in the pipeline, its purpose, and its components.</p>"},{"location":"contributor-guide/architecture-design/#overview","title":"Overview","text":"<p>The diagram below illustrates the stages of the CI/CD pipeline and the flow of code changes from development to deployment. The pipeline consists of the development flow and the release flow.</p> <pre><code>graph TB\n    subgraph Local[\"Development Environment\"]\n        subgraph Developer[\"Developer\"]\n            Codebase[(\"Codebase\")]\n            Commit[\"Commit Changes\"]\n            Release[\"Create Release\"]\n        end\n        subgraph Precommit[\"Pre-commit\"]\n            CodeQuality[\"Code Quality\"]\n            CommitQuality[\"Commit Quality\"]\n        end\n        subgraph Commitizen[\"Release\"]\n            Tag[\"Create Tag\"]\n            Changelog[\"Generate Changelog\"]\n        end\n    end\n\n    subgraph Remote[\"GitHub\"]\n        subgraph CI[\"Continuous Integration\"]\n            Unit[\"Unit Tests\"]\n            Integration[\"Integration Tests\"]\n            PeerReview[\"Peer Review\"]\n        end\n        subgraph Repository[\"Repository\"]\n            Main[(\"Main Branch\")]\n            Version[(\"vX.Y.Z Tag\")]\n        end\n        subgraph CD[\"Continuous Deployment\"]\n            Docker[\"Build Docker Image\"]\n            GHCR[(\"GitHub Container Registry\")]\n            MkDocs[\"Build Documentation\"]\n            Pages[(\"GitHub Pages\")]\n        end\n    end\n\n    Codebase --&gt; Commit\n    Codebase --&gt; Release\n\n    Commit --&gt;|\"Commit\"| CodeQuality\n    CodeQuality --&gt; CommitQuality\n    CommitQuality --&gt;|\"Push\"| Unit\n    Unit --&gt; Integration\n    Integration --&gt; PeerReview\n    PeerReview --&gt;|\"Merge\"| Main\n\n    Release --&gt;|\"Bump\"| Tag\n    Tag --&gt; Changelog\n    Changelog -----&gt;|\"Push\"| Version\n    Version --&gt; Docker\n    Docker --&gt; GHCR\n    Version --&gt; MkDocs\n    MkDocs --&gt; Pages</code></pre>"},{"location":"contributor-guide/architecture-design/#development-flow","title":"Development Flow","text":"<p>In the development flow, developers are responsible for making changes to the codebase and committing these changes to the repository. When changes are ready, developers commit these changes, triggering the pre-commit checks.</p>"},{"location":"contributor-guide/architecture-design/#pre-commit","title":"Pre-commit","text":"<p>The pre-commit checks involve several steps to ensure that the codebase and the repository stay in a maintainable state. These steps are executed locally using the <code>pre-commit</code> framework and block the commit if any of the checks fail.</p>"},{"location":"contributor-guide/architecture-design/#code-quality","title":"Code Quality","text":"<p>First, the code is formatted and linted using <code>ruff</code>. Next, the code is type-checked using <code>pyright</code>. Markdown is also treated as code for this project, so it is linted using <code>markdownlint</code>.</p>"},{"location":"contributor-guide/architecture-design/#commit-quality","title":"Commit Quality","text":"<p>Since commit messages are a key input to the release process, they validated using <code>commitizen</code>. Commitizen enforces a consistent commit message format and ensures that the messages follow the Conventional Commits specification.</p>"},{"location":"contributor-guide/architecture-design/#continuous-integration","title":"Continuous Integration","text":"<p>Once changes are pushed to the repository, the continuous integration process starts. In this stage, a series of tests are run to ensure the new code works as expected and does not introduce regressions.</p> <p>Unit tests are in place to validate the behavior of individual components, while integration tests validate the interaction between components. We use the <code>pytest</code> framework to run the tests.</p> <p>All pre-commit checks are also run in the CI pipeline to avoid any discrepancies between the local and remote environments.</p> <p>When all tests and checks pass, there is a final peer review before the changes are merged into the main branch.</p>"},{"location":"contributor-guide/architecture-design/#release-flow","title":"Release Flow","text":"<p>The release flow is triggered when a developer bumps the version of the application and creates a new release.</p>"},{"location":"contributor-guide/architecture-design/#release","title":"Release","text":"<p>The first part of the release flow involves determining the version number for the new release. This is done using <code>Commitizen</code>, which automatically increments the version based on the commit messages. Version numbers follow the Semantic Versioning specification.</p> <p>Secondly, a changelog is generated using <code>commitizen</code>. The changelog provides a summary of the changes included in the release, making it easier for users to understand what has been updated.</p> <p>The new changelog is committed to the repository, and the version tag is created. This tag is used to trigger the continuous deployment process.</p>"},{"location":"contributor-guide/architecture-design/#continuous-deployment","title":"Continuous Deployment","text":"<p>The continuous deployment process involves building the Docker image for the application and pushing it to the GitHub Container Registry (GHCR). The Docker image is versioned on the release tag.</p> <p>Additionally, the documentation is built using MkDocs and publishedb to GitHub Pages. The documentation is also tagged with the release version using mike. This way, users can access the documentation corresponding to the version of the app they are using.</p>"},{"location":"contributor-guide/development-environment/","title":"Development Environment","text":"<p>Follow the steps below to set up your development environment.</p> <p>Prerequisites</p> <p>You need to have Git installed on your system.</p>"},{"location":"contributor-guide/development-environment/#environment-setup","title":"Environment Setup","text":"<p>You can set up the development environment using either the development container or following the manual setup process.</p>"},{"location":"contributor-guide/development-environment/#using-the-development-container","title":"Using the Development Container","text":"<p>The project includes a development container to automatically set up your development environment, including the all tools and dependencies required to develop the application locally.</p> <p>Prerequisites</p> <p>Docker must be installed on your system to use the development container.</p>"},{"location":"contributor-guide/development-environment/#quick-start","title":"Quick Start","text":"<p>See the video installation guide below for a step-by-step tutorial on installing the development container with Visual Studio Code:</p> <p>First, install the Remote Development Extension Pack. Next, open Visual Studio Code and click on icon in the bottom left corner to open the command palette for remote environments.</p> <p>Select the <code>Clone Repository in Container Volume</code> command. This will prompt you to select the repository to clone. Choose the <code>thijsfranck/courageous-comets</code> repository or paste the repository URL.</p> <p>Once you confirm the selection, the development container will be set up automatically.</p>"},{"location":"contributor-guide/development-environment/#detailed-setup-guide","title":"Detailed Setup Guide","text":"<p>For more details, refer to the setup guide for your IDE:</p> <ul> <li>Visual Studio Code</li> <li>PyCharm</li> </ul>"},{"location":"contributor-guide/development-environment/#services","title":"Services","text":"<p>The development container includes the following services for local development:</p> Service Description Address Redis Database <code>localhost:6379</code> RedisInsight Database GUI <code>localhost:8001</code>"},{"location":"contributor-guide/development-environment/#manual-setup","title":"Manual Setup","text":"<p>If you prefer to set up the development environment manually, follow the steps below.</p> <p>Prerequisites</p> <p>Please ensure Python 3.12 and Poetry are installed on your system.</p>"},{"location":"contributor-guide/development-environment/#clone-the-repository","title":"Clone the Repository","text":"<p>To clone the repository, run the following command:</p> <pre><code>git clone https://github.com/thijsfranck/courageous-comets.git\n</code></pre> <p>Next, open the project in your preferred IDE or navigate to the project directory using the terminal.</p>"},{"location":"contributor-guide/development-environment/#install-dependencies","title":"Install Dependencies","text":"<p>Start by installing the project dependencies using Poetry:</p> <pre><code>poetry install\n</code></pre> <p>This will create a virtual environment and install the required dependencies.</p>"},{"location":"contributor-guide/development-environment/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Next, install the pre-commit hooks to ensure that your code is formatted and linted before each commit:</p> <pre><code>poetry run pre-commit install\n</code></pre> <p>This will set up the pre-commit hooks to run automatically when you commit changes to the repository.</p>"},{"location":"contributor-guide/development-environment/#redis-database","title":"Redis Database","text":"<p>The application requires a Redis database to run. We recommend setting up a local Redis instance using Docker for development purposes.</p> <p>To start a Redis instance using Docker, run the following command:</p> <pre><code>docker run -d -p 6379:6379 -p 8001:8001 redis/redis-stack:latest\n</code></pre> <p>This will start a Redis server on port <code>6379</code> and a RedisInsight GUI on port <code>8001</code>.</p>"},{"location":"contributor-guide/development-environment/#configuring-your-environment","title":"Configuring your Environment","text":"<p>To run the application, you will need to provide the following configurations in a <code>.env</code> file at the project root directory.</p>"},{"location":"contributor-guide/development-environment/#discord-token","title":"Discord Token","text":"<p>The application requires a Discord bot token to run. It should be stored in the <code>.env</code> file as follows:</p> <pre><code>DISCORD_TOKEN=&lt;YOUR DISCORD_TOKEN&gt;\n</code></pre> <p>The repository includes an encrypted <code>.env.lock</code> file with the shared Discord bot token for our team. Follow the Secrets Management guide to decrypt the file and start using the token.</p> Can I use my own Discord bot token? <p>Yes, you can use your own Discord bot token. If you do so, there's need to decrypt the <code>.env.lock</code> file.</p>"},{"location":"contributor-guide/development-environment/#redis-configuration","title":"Redis Configuration","text":"<p>If you're not using the development container, you will need to configure the Redis connection in the <code>.env</code> file:</p> <pre><code>REDIS_HOST=localhost\nREDIS_PORT=6379\n</code></pre> <p>This configuration assumes you are running a local Redis instance on the default port.</p>"},{"location":"contributor-guide/development-environment/#running-the-application","title":"Running the Application","text":"<p>With your development environment set up and configured, you can run the application using the following command:</p> <pre><code>poetry run python -m courageous_comets\n</code></pre> <p>The application should now be online and ready to respond to input from your Discord server.</p>"},{"location":"contributor-guide/development-environment/#building-the-docker-image","title":"Building the Docker Image","text":"<p>Production Builds</p> <p>The release process is fully automated and does not require you to build the docker image locally. See the GitHub Actions section of the version control guide for more information.</p> <p>Before building the Docker image, first build the Python package with Poetry:</p> <pre><code>poetry build -f wheel\n</code></pre> <p>This will create a <code>.whl</code> file in the <code>dist</code> directory. Next, build the Docker image as follows:</p> <pre><code>docker build -t ghcr.io/thijsfranck/courageous-comets:latest .\n</code></pre>"},{"location":"contributor-guide/development-environment/#running-the-docker-container","title":"Running the Docker Container","text":"<p>Once you have built the Docker image, use the following command to run the production container locally:</p> <pre><code>docker run -i --env-file .env ghcr.io/thijsfranck/courageous-comets:latest\n</code></pre> <p>This will run the application just as it would in production, using your local <code>.env</code> file and Redis instance.</p>"},{"location":"contributor-guide/development-environment/#running-the-docker-compose-stack","title":"Running the Docker Compose Stack","text":"<p>To run the application in a production configuration including the Redis database, you can use the Docker Compose stack.</p> <p>First, build the Docker image as described in the previous section. Then, run the following command:</p> <pre><code>docker-compose up\n</code></pre> <p>This will start the application and the Redis database in separate containers using your local <code>.env</code> file.</p>"},{"location":"contributor-guide/development-environment/#running-the-documentation","title":"Running the Documentation","text":"<p>To view the documentation locally, you can use the following command:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>Open your browser and navigate to <code>http://localhost:8000</code> to view the documentation. The changes you make to the documentation will be automatically reflected in the browser.</p>"},{"location":"contributor-guide/documentation/","title":"Documentation","text":"<p>Good code documentation aids understanding and speeds up the development process. Follow the guidelines below to document your code effectively.</p>"},{"location":"contributor-guide/documentation/#what-to-document","title":"What to Document","text":"<p>Always document the following elements of your code:</p> <ol> <li>Classes, including their attributes and public methods</li> <li>Module-level functions and constants</li> </ol> <p>Prioritize documenting public methods and attributes (those not starting with an underscore). However, private methods with complex logic should also be documented for clarity.</p>"},{"location":"contributor-guide/documentation/#docstring-format","title":"Docstring Format","text":"<p>This project uses numpy-style docstrings. Refer to the style guide for the full specification and detailed examples.</p> <p>Here are some examples of how to write good documentation for functions and classes:</p> Function Documentation <pre><code>def example_function(param1: int, param2: str):\n    \"\"\"\n    One-line summary of the function.\n\n    Detailed functional description of what the function does. Can span\n    multiple lines.\n\n    Parameters\n    ----------\n    param1 : int\n        Description of the first parameter.\n    param2 : str\n        Description of the second parameter.\n\n    Returns\n    -------\n    bool\n        Description of the return value.\n\n    Raises\n    ------\n    ValueError\n        Description of the error.\n\n    Examples\n    --------\n    &gt;&gt;&gt; example_function(1, \"test\")\n    True\n    \"\"\"\n    ...\n</code></pre> Class Documentation <pre><code>class Example:\n    \"\"\"\n    Class-level docstring describing the class.\n\n    Attributes\n    ----------\n    attribute : int\n        Description of the attribute.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"contributor-guide/documentation/#type-annotations","title":"Type Annotations","text":"<p>Python type annotations are strongly encouraged to improve code readability and maintainability. Use type annotations for all parameters and return values, as well as class attributes.</p> What are type annotations? <p>Type annotations are a way to specify the expected types of variables, function parameters, and return values in Python code. They are used to improve code readability and catch type-related errors early. Refer to the official documentation for more information.</p>"},{"location":"contributor-guide/secrets-management/","title":"Secrets Management","text":"<p>To use our team's shared Discord bot token, you will need to retrieve it from the <code>.env.lock</code> file in the project root directory. This section will guide you through the process of decrypting the file to access the token.</p>"},{"location":"contributor-guide/secrets-management/#install-tools","title":"Install Tools","text":"<p>First, you will need to install <code>age</code> and <code>SOPS</code> on your system. Follow the instructions for your operating system below.</p> WindowsmacOSLinuxDevelopment Container <p>Open a PowerShell terminal and run the following command to install <code>SOPS</code>:</p> <pre><code>winget install -e --id Mozilla.SOPS\n</code></pre> <p>To install <code>age</code>, download the latest binary for Windows and add your <code>age</code> binary to the system <code>PATH</code>.</p> <p>Open a terminal and run the following command:</p> <pre><code>brew install age sops\n</code></pre> <p>Download the <code>SOPS</code> binary for your platform. For instance, if you are on an amd64 architecture:</p> <pre><code>curl -LO https://github.com/getsops/sops/releases/download/v3.9.0/sops-v3.9.0.linux.amd64\n</code></pre> <p>Move the binary into your <code>PATH</code>:</p> <pre><code>mv sops-v3.9.0.linux.amd64 /usr/local/bin/sops\n</code></pre> <p>Make the binary executable:</p> <pre><code>chmod +x /usr/local/bin/sops\n</code></pre> <p>Finally, install <code>age</code>:</p> <pre><code>sudo apt-get install -y age\n</code></pre> <p>If you are using the development container, the tools are already installed! \ud83c\udf89</p>"},{"location":"contributor-guide/secrets-management/#generate-keys","title":"Generate Keys","text":"Using the development container <p>The development container automatically generates a key pair for you on initial setup. You public key will be shown in the terminal output. You can also find it later in the <code>secrets/keys.txt</code> file.</p> <p>Next, you will need to generate a new key pair using <code>age</code>. Run the following command from the root directory of the project:</p> <pre><code>age-keygen -o &gt; secrets/keys.txt\n</code></pre> <p>This will create a new key pair and save it to the <code>secrets/keys.txt</code> file. Share your public key with the team so it can be registered.</p> <p>Security Warning</p> <p>Only your public key can be safely shared. Do not share the private key with anyone!</p> Where can I find my public key? <p>You can find your public key in the <code>secrets/keys.txt</code> file or in the terminal output after generating the key pair.</p>"},{"location":"contributor-guide/secrets-management/#registering-a-new-public-key","title":"Registering a new Public Key","text":"<p>Prerequisite</p> <p>This step needs to be performed by a team member who already has access to the <code>.env</code> file.</p> <p>To register a new public key, first extend the <code>.sops.yaml</code> file in the project root directory. Add the public key to the list of <code>age</code> keys. Each key is separated by a comma and a newline.</p> <pre><code>creation_rules:\n  - age: &gt;-\n      &lt;KEY1&gt;,\n      &lt;KEY2&gt;,\n      &lt;KEY3&gt;\n</code></pre> <p>Next, encrypt the <code>.env</code> file with the updated list of keys and push it to the repository.</p>"},{"location":"contributor-guide/secrets-management/#decrypting-secrets","title":"Decrypting Secrets","text":"<p>Once your public key is added to the <code>.env.lock</code> file, you can decrypt the file to access the Discord bot token. First, pull the latest changes from the repository:</p> <pre><code>git pull\n</code></pre> <p>Prerequisite</p> <p><code>SOPS</code> requires the <code>SOPS_AGE_KEY_FILE</code> environment variable to be set to the path of your private key file. This is automatically set up in the development container.</p> <p>Next, run the following command to decrypt the <code>.env.lock</code> file:</p> <pre><code>sops decrypt --input-type dotenv --output-type dotenv .env.lock &gt; .env\n</code></pre> <p>This will decrypt the file and save the contents to a new <code>.env</code> file in the project root directory. You can now access the Discord bot token.</p> <p>Security Warning</p> <p>Do not commit your decrypted <code>.env</code> file to version control or share the contents with anyone!</p>"},{"location":"contributor-guide/secrets-management/#encrypting-secrets","title":"Encrypting Secrets","text":"<p>To encrypt the <code>.env</code> file after making changes, run the following command:</p> <pre><code>sops encrypt .env &gt; .env.lock\n</code></pre> <p>This will encrypt the file and save it to the <code>.env.lock</code> file. You can now commit the changes to version control.</p>"},{"location":"contributor-guide/testing/","title":"Testing","text":"<p>Automated tests are key to our success, since they allow us to catch bugs early, run sections of code in isolation, and accelerate our development pace.</p>"},{"location":"contributor-guide/testing/#structure","title":"Structure","text":"<p>Test modules should be located in the <code>tests</code> directory at the root of the project. The <code>tests</code> directory is further divided into subdirectories for unit tests and integration tests. Each unit tests module should have a corresponding module in the <code>courageous_comets</code> package.</p> Test Module Structure <pre><code>project_root/\n\u251c\u2500\u2500 courageous_comets/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 example.py\n\u251c\u2500\u2500 tests/\n|   \u251c\u2500\u2500 conftest.py\n\u2502   \u251c\u2500\u2500 courageous_comets/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 test__example.py\n\u2502   \u2514\u2500\u2500 integrations/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 test__integration.py\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"contributor-guide/testing/#running-tests","title":"Running Tests","text":"<p>We use the <code>pytest</code> framework for writing and running our tests. To run the tests, use the following command from the root of the project:</p> <pre><code>poetry run pytest\n</code></pre> <p>This command will discover and run all the tests modules that match the pattern <code>test__*.py</code>.</p> Running Tests in your IDE <p>Most modern IDEs have built-in support for running tests. You can run tests directly from your IDE, which can be more convenient than running them from the command line.</p> <ul> <li>Visual Studio Code</li> <li>PyCharm</li> </ul> <p>The development container is pre-configured for using <code>pytest</code> in Visual Studio Code.</p>"},{"location":"contributor-guide/testing/#what-to-test","title":"What to Test","text":"<p>Unit tests should cover the following aspects of your code:</p> <ul> <li>Input validation</li> <li>Correctness of output (or outcome) given a valid input</li> <li>Error handling</li> </ul> Consider Edge Cases <p>When writing tests, consider edge cases such as invalid inputs and unexpected behavior. These are often the areas where bugs are most likely to occur.</p> <p>Some parts of the code may be more critical than others. Focus on writing tests for the most critical parts of the codebase, such as complex algorithms, core functionality or user-facing features.</p>"},{"location":"contributor-guide/testing/#writing-tests","title":"Writing Tests","text":"<p>Each test case should be self-contained and independent of other tests. This means that each test should set up its own data and clean up after itself. Avoid relying on the state of other tests or the order in which tests are run.</p> <p>When writing tests, follow these guidelines:</p> <ul> <li>Use descriptive test names that clearly indicate what is being tested.</li> <li>Limit each test to a single logical concept.</li> <li>Use the <code>assert</code> statement to check the expected outcome of the test.</li> <li>Aim for one <code>assert</code> statement per test.</li> <li>Use fixtures to set up common data or resources.</li> </ul> Example Tests <p>The <code>examples</code> folder includes sample tests that you can use as a base for your own test.</p>"},{"location":"contributor-guide/testing/#unit-testing-and-type-annotations","title":"Unit Testing and Type Annotations","text":"<p>You can reduce the need for unit tests by indicating the expected types of input arguments and return values as type annotations. While they don't replace unit tests, type annotations can reduce the number of tests you might need to write, particularly those related to input validation.</p> <p>For instance, consider the following function without type annotations:</p> Function Without Type Annotations <pre><code>def add(a, b):\n    return a + b\n</code></pre> <p>Without type annotations, you might write multiple tests to ensure that the function behaves correctly with different types of input, like strings, integers, or floats. But with type annotations:</p> Function With Type Annotations <pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre> <p>The function's expected behavior is clearer. You know that both <code>a</code> and <code>b</code> should be integers, and the return value will also be an integer. With these type annotations in place, there's less need to write unit tests checking for behaviors with non-integer inputs since the static type checker can catch those mistakes for you.</p>"},{"location":"contributor-guide/version-control/","title":"Version Control","text":"<p>When making changes to the project, follow these guidelines.</p>"},{"location":"contributor-guide/version-control/#branching","title":"Branching","text":"<p>Always create a new branch for your changes. This makes it easier to handle multiple contributions simultaneously.</p> <p>First, pull the latest changes from the <code>main</code> branch:</p> <pre><code>git pull main\n</code></pre> <p>Next, create a new branch with the following command:</p> <pre><code>git checkout -b \"&lt;YOUR_BRANCH_NAME&gt;\"\n</code></pre> <p>Replace <code>&lt;YOUR_BRANCH_NAME&gt;</code> with a short, descriptive name for your branch. For example, <code>add-uptime-command</code>.</p>"},{"location":"contributor-guide/version-control/#commits","title":"Commits","text":"<p>Commits should follow the Conventional Commits specification. This helps maintain a clean and structured commit history.</p> <p>Try to keep your commits focused on a single task. If you need to make multiple changes, create separate commits for each change.</p> Conventional Commit Format <p>Here's an example of a good commit message:</p> <pre><code>feat: add uptime command\n\nAdd a new command to display the bot's uptime.\n</code></pre> Use Commitizen <p>The workspace includes Commitizen to help you write conventional commit messages. Run the following command to create a commit message interactively:</p> <pre><code>poetry run cz commit\n</code></pre>"},{"location":"contributor-guide/version-control/#automated-checks","title":"Automated Checks","text":"<p>The project includes pre-commit hooks to ensure your code meets the quality standards. These hooks run automatically before each commit.</p> <p>The pre-commit hooks include:</p> <ul> <li>Linting and formatting with Ruff</li> <li>Commit message validation with Commitizen</li> </ul> What if the pre-commit hooks fail? <p>If the pre-commit hooks fail, you will need to address the issues before committing your changes. Follow the instructions provided by the pre-commit hooks to identify and fix the issues.</p> How do I run the pre-commit hooks manually? <p>Pre-commit hooks can also be run manually using the following command:</p> <pre><code>poetry run pre-commit\n</code></pre> <p>The pre-commit hooks are intended to help us keep the codebase maintainable. If there are rules that you believe are too strict, please discuss them with the team.</p>"},{"location":"contributor-guide/version-control/#pull-requests","title":"Pull Requests","text":"<p>Once you have completed your changes, it's time to create a pull request. A pull request allows your changes to be reviewed and merged into the <code>main</code> branch.</p> <p>Before creating a pull request, ensure your branch is up to date with the latest changes from the <code>main</code> branch:</p> <pre><code>git pull main\n</code></pre> <p>Next, push your changes to the repository:</p> <pre><code>git push\n</code></pre> <p>Finally, create a pull request on GitHub. Select your branch as the source and the <code>main</code> branch as the base.</p> <p>In the pull request description, provide a brief overview of the changes and any relevant information for reviewers.</p> Pull Request Description <p>Here's an example of a good pull request description:</p> <pre><code># feat: add uptime command\n\nThis pull request adds a new uptime command to display the bot's uptime.\n\n## Changes\n\n- Added a new command to display the bot's uptime\n- Updated the help command to include information about the new command\n\n## Notes\n\n- The new command is implemented in a separate file for better organization\n- The command has been tested locally and works as expected\n</code></pre>"},{"location":"contributor-guide/version-control/#automated-checks_1","title":"Automated Checks","text":"<p>The project includes automated checks to ensure the code meets the quality standards. These checks include:</p> <ul> <li>All pre-commit hooks must pass</li> <li>Type checking with Pyright</li> <li>Running all tests with pytest</li> </ul> What if the automated checks fail? <p>If any of the automated checks fail, please address the issues before requesting a review. Feedback from the automated checks should be available in the pull request checks tab.</p>"},{"location":"contributor-guide/version-control/#code-review","title":"Code Review","text":"<p>All pull requests should be reviewed by at least one other team member before merging. The reviewer will provide feedback and suggestions for improvement.</p> <p>Once the reviewer approves the pull request, you can merge it into the <code>main</code> branch.</p> How do I request a review? <p>Request a review from a team member by assigning them as a reviewer to your pull request.</p>"},{"location":"contributor-guide/version-control/#giving-feedback","title":"Giving Feedback","text":"<p>When providing feedback on a pull request, be constructive and specific. Point out areas for improvement and suggest possible solutions. If you have any questions or concerns, don't hesitate to ask the author for clarification.</p> <p>A code review should focus on the following aspects:</p> <ul> <li>Correctness and functionality</li> <li>Code quality and readability</li> <li>Adherence to the project guidelines</li> </ul> Good Code Review Feedback <p>Here are some examples of good code review feedback:</p> <pre><code>- Great work on the new command! The implementation looks good overall.\n- I noticed a small typo in the docstring. Could you update it to fix the typo?\n- The logic in the new command is a bit complex. Consider breaking it down into smaller functions for clarity.\n- The tests cover most of the functionality, but we are missing a test case for edge case X. Could you add a test for that?\n</code></pre> <p>Always be respectful and considerate when giving feedback. Remember that the goal is to improve the code and help the author grow as a developer.</p> <p>Be Positive</p> <p>Don't forget to acknowledge the positive aspects of the contribution as well!</p>"},{"location":"contributor-guide/version-control/#release","title":"Release","text":"<p>Releases are managed through Commitizen. To generate a new release, run the following command:</p> <pre><code>poetry run cz bump\n</code></pre> <p>This command will automatically determine the next version number based on the commit history and generate a new tag. It will also update the changelog with the latest changes. To push the changes to the repository, run:</p> <pre><code>git push &amp;&amp; git push --tags\n</code></pre> <p>The release will trigger a GitHub actions workflow to build and publish a new version of the Docker image and update the documentation.</p> Dry Run <p>You can perform a dry run to see the changes that will be made without actually committing them:</p> <pre><code>poetry run cz bump --dry-run\n</code></pre> Commitizen and Conventional Commits <p>Commitizen uses the commit messages to determine the type of changes and generate the release notes. Make sure to follow the commit message guidelines to ensure accurate release notes.</p>"},{"location":"contributor-guide/version-control/#semantic-versioning","title":"Semantic Versioning","text":"<p>Tags should be unique and follow the Semantic Versioning format. Semantic version numbers consist of three parts: <code>major.minor.patch</code>. For example, <code>1.0.0</code>.</p> <p>To calculate the next version number, follow these guidelines:</p> <ul> <li>For bug fixes or minor improvements, increment the patch version.</li> <li>For new features or significant improvements, increment the minor version.</li> <li>For breaking changes, increment the major version.</li> </ul> What is a breaking change? <p>A breaking change requires users to change the way they use the software. Examples include removal of features or backwards-incompatible API changes.</p> Semantic Versioning <p>Here are some examples of version increments:</p> <ul> <li>Bug fixes: <code>1.0.0</code> -&gt; <code>1.0.1</code></li> <li>New features: <code>1.0.1</code> -&gt; <code>1.1.0</code></li> <li>Breaking changes: <code>1.1.0</code> -&gt; <code>2.0.0</code></li> </ul>"},{"location":"contributor-guide/version-control/#github-actions","title":"GitHub Actions","text":"<p>A GitHub actions workflow will automatically build and publish a new version of the Docker image when a new tag is pushed to the repository.</p> <p>The updated image will be available on the GitHub Container Registry with both the release tag and the <code>latest</code> tag.</p> <p>The GitHub actions workflow also updates the documentation to reflect the new release.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the user guide for the Courageous Comets Discord bot! This guide is intended for users of the app and for those who want to learn more about its features and capabilities.</p>"},{"location":"user-guide/#contents","title":"Contents","text":"<ul> <li>Getting Started: An overview of the bot's basic features.</li> <li>Installing the bot: How to add the bot to your Discord server.</li> <li>Data Privacy: Information on how the bot handles your data.</li> </ul>"},{"location":"user-guide/data-privacy/","title":"Data Privacy","text":"<p>From the moment the bot is added to the server, it scans all messages sent by users to gather the data necessary for responding to interactions.</p> <p>While raw messages are not stored, the bot processes messages to identify keywords. The identified keywords, along with their count and byte representation, are stored in the database. Additionally, the Discord IDs for the message, user, channel, and server are recorded.</p> <p>For displaying messages as part of search results, the bot interacts with the Discord API to fetch the message content. The user who requested the search results can view the message content, even if they were not part of the original conversation. Messages are cached in the bot's memory for a limited time to improve performance.</p> <p>Apart from interactions with the Discord API, no data is shared with third parties, and all data is securely stored on the bot's server.</p>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":"<p>Joining a new Discord server can sometimes feel overwhelming. With Courageous Comets, you can quickly get a sense of what a server is all about and decide if it's the right place for you.</p> <p>Whether you're exploring a new community or trying to find where you fit in, Courageous Comets makes it easy.</p> <p>The following sections will walk you through common interactions with the bot. For a complete list of available interactions, refer to the Interactions Overview at the end of this guide.</p>"},{"location":"user-guide/getting-started/#finding-your-way-around","title":"Finding Your Way Around","text":"<p>Let's say you've just joined a new server and you are interested in web development with Django. We'll use the search feature to find the most recent messages related to those topics.</p> <p>Type the following command in any channel:</p> <pre><code>/search query:\"web development with Django\"\n</code></pre> <p>The bot will return a list of messages that are relevant to your query. The search results include references to the channels and message authors, so you can get an idea of where the conversation is happening.</p> Search Results <p>The search feature is also available as a context menu option when you right-click on a message. Use this when you see an interesting message and want to find more like it.</p>"},{"location":"user-guide/getting-started/#discovering-like-minded-people","title":"Discovering Like-Minded People","text":"<p>If you're looking for a new community to join, you can ask the bot to find channels and users that share your mindset. Let's say you're excited to learn more about programming and are looking for people who feel the same way.</p> <p>Try the following command:</p> <pre><code>/sentiment_search query:\"excited to learn about programming\"\n</code></pre> <p>The bot will return a list of messages that share your sentiment. Again, the results include the channels and authors of the messages to help you explore further.</p> Sentiment Search Results <p>The sentiment search feature is also available as a context menu option when you right-click on a message. Use this when you find a message that resonates with you and want to find more like it.</p>"},{"location":"user-guide/getting-started/#getting-to-know-the-community","title":"Getting to Know the Community","text":"<p>Once you've found a community you're interested in, you might want to learn more about the people who are active there.</p>"},{"location":"user-guide/getting-started/#popular-topics","title":"Popular Topics","text":"<p>You can use the <code>topics</code> interaction to see a summary of what's being discussed on a server, channel, or by a specific user.</p> <p>For example, to see the most popular topics in the Python Discord server, type:</p> <pre><code>/topics scope:GUILD\n</code></pre> <p>The bot will return an overview of the most popular topics in the server.</p> Popular Topics <p>You can also use the <code>Show user interests</code> context menu option to see what a particular user likes to talk about.</p>"},{"location":"user-guide/getting-started/#most-active-times","title":"Most Active Times","text":"<p>If you're curious about when the server is most active, you can use the <code>frequency</code> interaction to see a graph of message frequency over a given time period.</p> <p>For example, to see the daily message frequency for the last 7 days, type:</p> <pre><code>/frequency duration:DAILY\n</code></pre> Most Active Times <p>Alternatively you can specify <code>HOURLY</code> to get the hourly message frequency for the last 24 hours, or <code>MINUTE</code> for the last 60 minutes.</p>"},{"location":"user-guide/getting-started/#contributing-to-a-safe-environment","title":"Contributing to a Safe Environment","text":"<p>Courageous Comets can also help moderators maintain a positive and welcoming environment in their servers. The sentiment analysis used to power the search features can also be used to identify toxic behavior and spam.</p> <p>Use the sentiment analysis interaction on a particular message or user to get an overview of their attitude.</p> User Sentiment <p>If a user's attitude is consistently positive, the bot provides a mechanism to praise them for their contributions. When you praise a user, the bot will send them a message to let them know they're appreciated!</p> Praise Message <p>Likewise, if the sentiment analysis indicates negative or toxic behavior, this can be addressed by the moderation team.</p>"},{"location":"user-guide/getting-started/#about-the-bot","title":"About the Bot","text":"<p>If you ever need a quick overview of the bot and its features, you can use the <code>about</code> interaction.</p> <pre><code>/about\n</code></pre> <p>The bot will provide a brief description of its capabilities and how to use them. The message also includes a link to this documentation for more detailed information!</p> About the Bot"},{"location":"user-guide/getting-started/#interactions-overview","title":"Interactions overview","text":"<p>The table below lists all available interactions and in which context they can be used.</p> Interaction Description Available As Search Find channels, users messages that match your interests. <code>/search</code>, Message context Popular Topics Show the most popular topics for a given server, channel or user. <code>/topics</code>, User context Sentiment Search Find channels, users and messages with similar attitudes. <code>/sentiment_search</code>, Message context Sentiment Analysis Analyze the overall attitude of a message or a user. User context, Message context Frequency Show the message frequency on a server over a given time period. <code>/frequency</code> About Get a brief overview of the bot and its features. <code>/about</code> Ping Check if the bot is online and responsive. <code>/ping</code>"},{"location":"user-guide/installing-the-bot/","title":"Installing the Bot","text":""},{"location":"user-guide/installing-the-bot/#installing-the-bot","title":"Installing the Bot","text":"<p>This guide will help you get started with the Courageous Comets Discord bot. You'll learn how to invite the bot to your server and use its admin features.</p>"},{"location":"user-guide/installing-the-bot/#installation","title":"Installation","text":"<p>Adding the bot to your Discord server is easy - just click the button below!</p> <p>Add to Discord </p>"},{"location":"user-guide/installing-the-bot/#initial-setup","title":"Initial Setup","text":"<p>Once the bot is added to your server, you will need to make the bot's interactions available to your users. You can do so by mentioning the bot and using the <code>sync</code> command as shown below:</p> <pre><code>@Courageous Comets sync\n</code></pre> <p>After running the <code>sync</code> command, the bot will confirm the number of interactions that are now available.</p> Run the <code>sync</code> command regularly <p>It's a good idea to run the <code>sync</code> command regularly to stay up-to-date with the latest features and interactions.</p> <p>You're all set! The bot is now ready to use on your server.</p> <p>Results may vary initially</p> <p>The quality of responses will improve over time as the bot collects more data. The more active your server is, the faster the bot will learn.</p>"}]}